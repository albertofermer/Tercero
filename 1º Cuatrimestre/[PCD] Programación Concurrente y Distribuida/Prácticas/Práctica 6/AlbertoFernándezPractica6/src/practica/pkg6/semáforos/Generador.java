package practica.pkg6.semáforos;

import static java.lang.Thread.sleep;
import java.util.concurrent.Semaphore;

/**
 *
 * @author Alberto Fernández
 */
public class Generador extends java.awt.Frame {

    private static final int NUMROBOTSA = 4;

    /**
     * Creates new form Generador
     */
    public Generador() {
        initComponents();
        setVisible(true);
    }
    
    public int getNumRobots(){
        return NUMROBOTSA;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setPreferredSize(new java.awt.Dimension(1000, 1000));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
     * Será quien comience la ejecución mediante un Frame. Debe lanzar los cuatro robots tipo 'A' y al robot grapador,
     * esperar a que finalicen los robots RA e interrumpir al robot reponedor.
     * @param args the command line arguments
     * @throws java.lang.InterruptedException
     */
    public static void main(String args[]) throws InterruptedException {

        Generador generador = new Generador();
        CanvasP6 lienzo = new CanvasP6(generador);
        lienzo.setVisible(true);
        generador.add(lienzo);
        
        Thread[] RobotsA = new RobotA[NUMROBOTSA];
        Semaphore[] semaforosRobotA = new Semaphore[NUMROBOTSA];
        Semaphore semaforosG[] = new Semaphore[NUMROBOTSA];

        for (int i = 0; i < NUMROBOTSA; i++) {
            semaforosRobotA[i] = new Semaphore(1); //Inicializo los semaforos de los robots a 1 para que puedan entrar cuando lleguen.
        }
        for (int i = 0; i < NUMROBOTSA; i++) {
            semaforosG[i] = new Semaphore(0); //Inicializo el semaforo del grapador a 0 para que cuando llegue no avance él solo.
        }
        for (int i = 0; i < NUMROBOTSA; i++) {
            RobotsA[i] = new RobotA(semaforosRobotA[i], semaforosG[i],lienzo, i); //Creo NUMROBOTSA hilos del tipo RobotA.
        }
        
        
        Thread RobotG = new Thread(new RobotG(semaforosRobotA, semaforosG, lienzo));
        for (int i = 0; i < NUMROBOTSA; i++) {
            RobotsA[i].start(); //Comienza la ejecución de los robotsA
        }

        RobotG.start(); //Comienza la ejecución del robot grapador

        for (int i = 0; i < NUMROBOTSA; i++) {
            RobotsA[i].join();  //Espero a que terminen los robotsA
        }

        RobotG.interrupt(); //Interrumpo al robot grapador para que finalice el programa
        sleep(3000);
        System.exit(0);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
