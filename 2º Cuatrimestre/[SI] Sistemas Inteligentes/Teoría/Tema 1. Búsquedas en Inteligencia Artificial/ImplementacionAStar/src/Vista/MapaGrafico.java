package Vista;

import Modelo.Nodo;
import Controlador.ControladorMapa;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import static java.lang.Thread.sleep;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author Alberto Fernández
 */
public class MapaGrafico extends javax.swing.JFrame{

    private ControladorMapa cm;
    private int TableroX;
    private int TamX;
    private int TableroY;
    private int TamY;
    private Integer[][] matrizPropiedades;
    private JButton[][] matrizBotones;

    /**
     * Creates new form MapaGrafico
     */
    public MapaGrafico(int dimX, int dimY) {
        //System.out.println(dimX + " " + dimY);
        matrizBotones = new JButton[dimX][dimY];
        matrizPropiedades = new Integer[dimX][dimY];
        for (int i = 0; i < dimX; i++) {
            for (int j = 0; j < dimY; j++) {
                matrizPropiedades[i][j] = 0;
            }
        }
        initComponents();
        TableroX = panelTablero.getWidth();
        TableroY = panelTablero.getHeight();
        panelTablero.setLayout(new GridLayout(dimX, dimY));
        ObtenerTamanioObjetos(dimX, dimY);

        int contadorX, contadorY;
//Se recorre la dimension X desde 0 hasta DimensionX
        for (contadorX = 0; contadorX < dimX; contadorX++) {
            //Se recorre la dimension Y desde 0 hasta DimensionY
            for (contadorY = 0; contadorY < dimY; contadorY++) {
                //Se crea un nuevo objeto de tipo JButton
                JButton btnNuevo = new JButton();
                //Se le asignan sus dimensiones (ancho, alto)
                btnNuevo.setSize(TamX, TamY);
                btnNuevo.setBackground(Color.white);
                //Se asigna un texto con la posición del botón en la matriz al botón, al tooltip del botón
                btnNuevo.setToolTipText(Integer.toString(contadorX) + "," + Integer.toString(contadorY));
                //Se agrega a la matriz el botón recien creado
                matrizBotones[contadorX][contadorY] = btnNuevo;
                //Se agrega un nuevo evento que maneje la acción clic sobre el botón creado
                matrizBotones[contadorX][contadorY].addMouseListener(new MouseListener() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        if (e.getButton() == MouseEvent.BUTTON3) { //click derecho
                            setTipo(btnNuevo);
                        }

                        if (e.getButton() == MouseEvent.BUTTON1) {
                        }
                    }

                    @Override
                    public void mousePressed(MouseEvent e) {
                    }

                    @Override
                    public void mouseReleased(MouseEvent e) {
                    }

                    @Override
                    public void mouseEntered(MouseEvent e) {
                    }

                    @Override
                    public void mouseExited(MouseEvent e) {
                    }

                });
                //Se agrega al panel 
                panelTablero.add(matrizBotones[contadorX][contadorY]);
                //Se redibuja el panel
                RedibujarTablero();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        panelTablero = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        botonEmpezar = new javax.swing.JButton();
        LimpiarBoton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Implementacion Algoritmo A*");

        panelTablero.setPreferredSize(new java.awt.Dimension(500, 500));

        javax.swing.GroupLayout panelTableroLayout = new javax.swing.GroupLayout(panelTablero);
        panelTablero.setLayout(panelTableroLayout);
        panelTableroLayout.setHorizontalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 379, Short.MAX_VALUE)
        );
        panelTableroLayout.setVerticalGroup(
            panelTableroLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        botonEmpezar.setText("Buscar");

        LimpiarBoton.setText("Limpiar");

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(204, 255, 204));
        jTextArea1.setColumns(20);
        jTextArea1.setForeground(new java.awt.Color(0, 0, 0));
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setText("Pulsa boton derecho para seleccionar el color de la casilla.\n\nRosa: Casilla Objetivo\nVerde: Casilla Inicio\nRojo: Casilla Bloqueada");
        jTextArea1.setWrapStyleWord(true);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(LimpiarBoton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonEmpezar)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonEmpezar)
                    .addComponent(LimpiarBoton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panelTablero, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelTablero, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton LimpiarBoton;
    public javax.swing.JButton botonEmpezar;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JPanel panelTablero;
    // End of variables declaration//GEN-END:variables

    private void ObtenerTamanioObjetos(int cantX, int cantY) {
        TamX = TableroX / cantX;
        TamY = TableroY / cantY;
    }

    private void setTipo(JButton btn) {

        String[] s = btn.getToolTipText().split(","); // 1,1
        int x = Integer.parseInt(s[0]);
        int y = Integer.parseInt(s[1]);
        matrizPropiedades[x][y] = (matrizPropiedades[x][y] + 1) % 4; // 0: normal ; 1: destino ; 2: origen ; 3: bloqueo

        switch (matrizPropiedades[x][y]) {
            case 0:
                btn.setBackground(Color.white);
                break;
            case 1:
                btn.setBackground(Color.PINK);
                if (contieneValor(1, x, y)) {
                    btn.setBackground(Color.green);
                    matrizPropiedades[x][y] = 2;
                    if (contieneValor(2, x, y)) {
                        btn.setBackground(Color.red);
                        matrizPropiedades[x][y] = 3;
                    }
                }
                break;
            case 2:
                btn.setBackground(Color.GREEN);
                if (contieneValor(2, x, y)) {
                    btn.setBackground(Color.red);
                    matrizPropiedades[x][y] = 3;
                }
                break;
            case 3:
                btn.setBackground(Color.red);
                break;
            default:
                throw new AssertionError();
        }

    }

    private void RedibujarTablero() {
        //Se valida los componentes del elemento pnlTablero
        panelTablero.validate();
        //Se redibuja el elemento pnlTablero y sus componentes hijos
        panelTablero.repaint();
    }

    public boolean contieneValor(int valor, int x, int y) {
        boolean temp = false;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == valor && (x != i || y != j)) {
                    temp = true;
                }
            }

        }

        return temp;
    }

    public boolean contieneValor(int valor) {
        boolean temp = false;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == valor) {
                    temp = true;
                }
            }

        }

        return temp;
    }

    public Integer[][] getMapaPropiedades() {
        return matrizPropiedades;
    }

    public int getXInicial() {
        int x = -1;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == 2) {
                    x = i;
                }
            }
        }

        return x;
    }

    public int getYInicial() {
        int y = -1;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == 2) {
                    y = j;
                }
            }
        }

        return y;
    }

    public int getXDestino() {
        int x = -1;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == 1) {
                    x = i;
                }
            }
        }

        return x;
    }

    public int getYDestino() {
        int y = -1;
        for (int i = 0; i < matrizPropiedades.length; i++) {
            for (int j = 0; j < matrizPropiedades[1].length; j++) {
                if (matrizPropiedades[i][j] == 1) {
                    y = j;
                }
            }
        }

        return y;
    }

    public void pintarRuta(ArrayList<Nodo> ruta) throws InterruptedException {
        for (Nodo ruta1 : ruta) {
            int x = ruta1.getX();
            int y = ruta1.getY();
            if (x != getXDestino() || y != getYDestino()) {
                matrizBotones[x][y].setBackground(Color.YELLOW);
                sleep(100);
                
            }

        }
    }

    public void limpiarTipos() {
        for (int i = 0; i < matrizBotones.length; i++) {
            for (int j = 0; j < matrizBotones[1].length; j++) {
                matrizBotones[i][j].setBackground(Color.white);
                matrizPropiedades[i][j] = 0;
            }
        }
    }

    public void limpiarRecorrido() {
        for (int i = 0; i < matrizBotones.length; i++) {
            for (int j = 0; j < matrizBotones[1].length; j++) {
                if (matrizBotones[i][j].getBackground() == Color.YELLOW) {
                    matrizBotones[i][j].setBackground(Color.white);
                }
            }
        }
    }
}
