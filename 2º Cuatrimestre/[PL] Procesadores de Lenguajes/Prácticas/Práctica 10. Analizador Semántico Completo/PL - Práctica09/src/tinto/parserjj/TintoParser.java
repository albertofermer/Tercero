/* Generated By:JavaCC: Do not edit this line. TintoParser.java */
//------------------------------------------------------------------//
//                        COPYRIGHT NOTICE                          //
//------------------------------------------------------------------//
// Copyright (c) 2017, Francisco José Moreno Velo                   //
// All rights reserved.                                             //
//                                                                  //
// Redistribution and use in source and binary forms, with or       //
// without modification, are permitted provided that the following  //
// conditions are met:                                              //
//                                                                  //
// * Redistributions of source code must retain the above copyright //
//   notice, this list of conditions and the following disclaimer.  // 
//                                                                  //
// * Redistributions in binary form must reproduce the above        // 
//   copyright notice, this list of conditions and the following    // 
//   disclaimer in the documentation and/or other materials         // 
//   provided with the distribution.                                //
//                                                                  //
// * Neither the name of the University of Huelva nor the names of  //
//   its contributors may be used to endorse or promote products    //
//   derived from this software without specific prior written      // 
//   permission.                                                    //
//                                                                  //
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND           // 
// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,      // 
// INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF         // 
// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE         // 
// DISCLAIMED. IN NO EVENT SHALL THE COPRIGHT OWNER OR CONTRIBUTORS //
// BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,         // 
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED  //
// TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,    //
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND   // 
// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT          //
// LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING   //
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF   //
// THE POSSIBILITY OF SUCH DAMAGE.                                  //
//------------------------------------------------------------------//
//------------------------------------------------------------------//
//                      Universidad de Huelva                       //
//          Departamento de Tecnologías de la Información           //
//   Área de Ciencias de la Computación e Inteligencia Artificial   //
//------------------------------------------------------------------//
//                     PROCESADORES DE LENGUAJE                     //
//------------------------------------------------------------------//
//                                                                  //
//                  Compilador del lenguaje Tinto                   //
//                                                                  //
//------------------------------------------------------------------//
package tinto.parserjj;
import tinto.ast.*;
import tinto.ast.expression.*;
import tinto.ast.statement.*;
import tinto.ast.struct.*;

public class TintoParser implements TintoParserConstants {
  //----------------------------------------------------------------//
  //                        Miembros privados                       //
  //----------------------------------------------------------------//
  /**
	 * Contador de errores
	 */
  private int errorCount;

  /**
	 * Mensaje de errores
	 */
  private String errorMsg;

  //----------------------------------------------------------------//
  //               Método que desarrolla el análisis                //
  //----------------------------------------------------------------//
  /**
	 * Analiza un fichero ".tinto" añadiendo la información del cuerpo de los métodos
	 */
  public void parse(String name, SymbolTable symtab)
  {
    this.errorCount = 0;
    this.errorMsg = "";
    try
    {
      symtab.setActiveLibrary(name);
      CompilationUnit(symtab);
    }
    catch (Exception e)
    {
      catchError(e);
    }
  }

  //----------------------------------------------------------------//
  //       Métodos relacionados con el tratamiento de errores       //
  //----------------------------------------------------------------//
  /**
	 * Obtiene el número de errores del análisis
	 * @return
	 */
  public int getErrorCount()
  {
    return this.errorCount;
  }

  /**
	 * Obtiene el mensaje de error del análisis
	 * @return
	 */
  public String getErrorMsg()
  {
    return this.errorMsg;
  }

  /**
	 * Almacena un error de análisis
	 * @param ex
	 */
  private void catchError(Exception ex)
  {
    this.errorCount++;
    this.errorMsg += ex.toString();
  }

  //----------------------------------------------------------------//
  //                Métodos de verificación semántica               //
  //----------------------------------------------------------------//
  /**
	 * Verifica que la sentencia a añadir a un bloque es alcanzable
	 */
  private void verifyUnreachableCode(Statement stm, BlockStatement block)
  {
    if (stm != null && block.returns())
    {
      int errorcode = SemanticException.UNREACHABLE_CODE;
      catchError(new SemanticException(errorcode, getToken(0)));
    }
  }

  /**
	 * Verifica que el código de una función alcanza siempre un return
	 */
  private void verifyUnfinishedFunction(Token tk, BlockStatement body, SymbolTable symtab)
  {
    int type = symtab.getActiveFunction().getType();
    if (!TypeSystem.isVoid(type) && !body.returns())
    {
      int errorcode = SemanticException.UNFINISHED_FUNCTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que una variable no esté duplicada
	 */
  private void verifyDuplicatedVariable(Token tk, SymbolTable symtab)
  {
    if (symtab.getVariableInScope(tk.image) != null)
    {
      int errorcode = SemanticException.DUPLICATED_VARIABLE_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que una condición sea de tipo booleana.
	 */
  private void verifyConditionType(Token tk, Expression expr)
  {
    if (!TypeSystem.isBoolean(expr.getType()))
    {
      int errorcode = SemanticException.INVALID_CONDITION_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que una instrucción return devuelve un tipo de dato correcto
	 */
  private void verifyReturnType(Token tk, Expression expr, SymbolTable symtab)
  {
    int type = symtab.getActiveFunction().getType();
    if (expr == null && !TypeSystem.isVoid(type))
    {
      int errorcode = SemanticException.INVALID_RETURN_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
    if (expr != null && !TypeSystem.isAssignable(type, expr.getType()))
    {
      int errorcode = SemanticException.INVALID_RETURN_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica la existencia una variable de una instrucción de asignación
	 */
  private void verifyUnknownVariable(Token tk, SymbolTable symtab)
  {
    if (symtab.getVariable(tk.image) == null)
    {
      int errorcode = SemanticException.UNKNOWN_VARIABLE_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /** 
	 * Verifica que los tipos de datos en una instrucción de asignación son correctos
	 */
  private void verifyAssignTypes(Token tk, Variable var, Expression expr)
  {
    if (!TypeSystem.isAssignable(var.getType(), expr.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica la existencia de una biblioteca en la tabla de símbolos
	 */
  private void verifyUnknownLibrary(Token tk, SymbolTable symtab)
  {
    if (symtab.getLibrary(tk.image) == null)
    {
      int errorcode = SemanticException.UNKNOWN_LIBRARY_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica la existencia de una función en la biblioteca activa
	 */
  private void verifyUnknownFunction(Token tk, CallParameters param, SymbolTable symtab)
  {
    if (symtab.getActiveLibrary().getAnyFunction(tk.image, param.getTypes()) == null)
    {
      int errorcode = SemanticException.UNKNOWN_FUNCTION_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica la existencia de una función pública en una cierta biblioteca
	 */
  private void verifyUnknownFunction(Token tk, CallParameters param, LibraryDeclaration library)
  {
    if (library.getPublicFunction(tk.image, param.getTypes()) == null)
    {
      int errorcode = SemanticException.UNKNOWN_FUNCTION_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que los dos operandos de una expresión lógica (AND, OR) sean booleanos
	 */
  private void verifyBooleanTypes(Token tk, Expression exp1, Expression exp2)
  {
    if (!TypeSystem.isBoolean(exp1.getType()) || !TypeSystem.isBoolean(exp2.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que los tipos de los dos operandos de una relación sean correctos
	 */
  private void verifyRelationTypes(Token tk, int relop, Expression exp1, Expression exp2)
  {
    switch (relop)
    {
      case BinaryExpression.EQ :
      case BinaryExpression.NEQ :
      if (!TypeSystem.isComparable(exp1.getType(), exp2.getType()))
      {
        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
        catchError(new SemanticException(errorcode, tk));
      }
      break;
      case BinaryExpression.GT :
      case BinaryExpression.GE :
      case BinaryExpression.LT :
      case BinaryExpression.LE :
      if (!TypeSystem.isOrderable(exp1.getType(), exp2.getType()))
      {
        int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
        catchError(new SemanticException(errorcode, tk));
      }
      break;
    }
  }

  /**
	 * Verifica que una expresión sea de tipo booleana (para poder apilcar NOT).
	 */
  private void verifyBooleanType(Token tk, Expression expr)
  {
    if (!TypeSystem.isBoolean(expr.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que dos expresiones sean de tipo numérico (para poder aplicar '+' y '-').
	 */
  private void verifyNumericType(Token tk, Expression exp)
  {
    if (!TypeSystem.isNumeric(exp.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que dos expresiones sean de tipo numérico (para poder aplicar '+','-','*'y'/').
	 */
  private void verifyNumericTypes(Token tk, Expression exp1, Expression exp2)
  {
    if (!TypeSystem.isNumeric(exp1.getType()) || !TypeSystem.isNumeric(exp2.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que dos expresiones sean de tipo entero (para poder aplicar '%').
	 */
  private void verifyIntegerTypes(Token tk, Expression exp1, Expression exp2)
  {
    if (!TypeSystem.isInteger(exp1.getType()) || !TypeSystem.isInteger(exp2.getType()))
    {
      int errorcode = SemanticException.TYPE_MISMATCH_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  /**
	 * Verifica que el valor de un literal entero sea correcto
	 */
  private void verifyIntegerValue(Token tk)
  {
    try
    {
      if (tk.image.startsWith("0x") || tk.image.startsWith("0X")) Integer.parseInt(tk.image.substring(2), 16);
      if (tk.image.startsWith("0b") || tk.image.startsWith("0B")) Integer.parseInt(tk.image.substring(2), 2);
      else if (tk.image.startsWith("0")) Integer.parseInt(tk.image, 8);
      else Integer.parseInt(tk.image);
    }
    catch (Exception e)
    {
      int errorcode = SemanticException.NUMBER_FORMAT_EXCEPTION;
      catchError(new SemanticException(errorcode, tk));
    }
  }

  //----------------------------------------------------------------//
  //       Métodos relacionados con las aciones semánticas          //
  //----------------------------------------------------------------//
  /**
	 * Acción seántica asociada a añadir un tipo de argumento a una
	 * lista de tipos
	 */
  private int [] actionAddArgumentType(int type, int [] args)
  {
    int [] nl = new int [args.length + 1];
    System.arraycopy(args, 0, nl, 0, args.length);
    nl [args.length] = type;
    return nl;
  }

  /**
     * Acción semántica asociada a añadir una instrucción a un bloque de
     * instrucciones.
     */
  private void actionAddStatement(BlockStatement block, Statement stm)
  {
    if (stm == null) return;
    verifyUnreachableCode(stm, block);
    block.addStatement(stm);
  }

  /**
     * Acción semántica asociada a la asignación del cuerpo de una función
     */
  private void actionSetFunctionBody(Token tk, BlockStatement block, SymbolTable symtab)
  {
    verifyUnfinishedFunction(tk, block, symtab);
    symtab.getActiveFunction().setBody(block);
  }

  /**
	 * Acción semántica asociada al reconocimiento de una declaración de variable
	 */
  private Variable actionAddDeclaration(SymbolTable symtab, int type, Token tid)
  {
    verifyDuplicatedVariable(tid, symtab);
    Variable var = new Variable(type, tid.image);
    symtab.addLocalVariable(var);
    return var;
  }

  /**
	 * Acción semántica asociada al reconocimiento de una asignación
	 */
  private void actionAddAssignement(BlockStatement block, Variable var, Expression exp)
  {
    if (exp != null)
    {
      AssignStatement stm = new AssignStatement(var, exp);
      block.addStatement(stm);
    }
  }

  /**
	 * Acción semántica que obtiene la instrucción asociada a una declaración
	 * de variables. Si no hay inicializaciones devuelve null. Si sólo hay una
	 * devuelve esa asignación. Si hay más de una devuelve el bloque de
	 * asignaciones.
	 */
  private Statement actionGetStatementFromBlock(BlockStatement block)
  {
    Statement [] list = block.getStatementList();
    if (list.length == 0) return null;
    if (list.length == 1) return list [0];
    return block;
  }

  /**
	 * Acción semántica asociada a la creación de una instrucción if
	 */
  private Statement actionIfStatement(Token tk, Expression cond, Statement thenStm, Statement elseStm)
  {
    verifyConditionType(tk, cond);
    return new IfStatement(cond, thenStm, elseStm);
  }

  /**
     * Acción semántica asociada a la creación de una instrucción while
     */
  private Statement actionWhileStatement(Token tk, Expression cond, Statement body)
  {
    verifyConditionType(tk, cond);
    return new WhileStatement(cond, body);
  }

  /**
     * Acción asociada a la creación de una instrucción return
     */
  private Statement actionReturnStatement(Token tk, Expression exp, SymbolTable symtab)
  {
    verifyReturnType(tk, exp, symtab);
    return new ReturnStatement(exp);
  }

  /**
	 * Acción semántica asociada al reconocimiento de una instrucción de asignación
	 */
  private Statement actionAssignStatement(Token tk, Expression exp, SymbolTable symtab)
  {
    verifyUnknownVariable(tk, symtab);
    Variable var = symtab.getVariable(tk.image);
    verifyAssignTypes(tk, var, exp);
    return new AssignStatement(var, exp);
  }

  /**
	 * Acción semántica asociada al reconocimiento de una llamada a un método
	 * de la misma biblioteca
	 */
  private Statement actionCallStatement(Token tk, CallParameters param, SymbolTable symtab)
  {
    verifyUnknownFunction(tk, param, symtab);
    Function called = symtab.getActiveLibrary().getAnyFunction(tk.image, param.getTypes());
    CallExpression exp = new CallExpression(called, param, symtab.getActiveLibrary());
    return new CallStatement(exp);
  }

  /**
	 * Acción semántica asociada al reconocimiento de una llamada a un método
	 * de una biblioteca importada
	 */
  private Statement actionCallStatement(Token tid1, Token tid2, CallParameters param, SymbolTable symtab)
  {
    verifyUnknownLibrary(tid1, symtab);
    LibraryDeclaration lib = symtab.getLibrary(tid1.image);
    verifyUnknownFunction(tid2, param, lib);
    Function called = lib.getPublicFunction(tid2.image, param.getTypes());
    CallExpression exp = new CallExpression(called, param, lib);
    return new CallStatement(exp);
  }

  /**
	 * Acción semántica que crea una expresión binaria que define un OR entre
	 * dos expresiones
	 */
  private Expression actionOrExpression(Token tk, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyBooleanTypes(tk, exp1, exp2);
    int op = BinaryExpression.OR;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  /**
	 * Acción semántica que crea una expresión binaria que define un AND entre
	 * dos expresiones
	 */
  private Expression actionAndExpression(Token tk, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyBooleanTypes(tk, exp1, exp2);
    int op = BinaryExpression.AND;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  /**
	 * Acción semántica que crea una expresión binaria que define una relación entre
	 * dos expresiones.
	 */
  private Expression actionRelExpression(Token tk, int op, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyRelationTypes(tk, op, exp1, exp2);
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  /**
	 * Acción semántica que crea una expresión unaria sobre otra expresión.
	 */
  private Expression actionUnaryExpression(Token tk, int op, Expression exp)
  {
    switch (op)
    {
      case UnaryExpression.NONE :
      return exp;
      case UnaryExpression.NOT :
      verifyBooleanType(tk, exp);
      return new UnaryExpression(op, exp);
      case UnaryExpression.MINUS :
      verifyNumericType(tk, exp);
      return new UnaryExpression(op, exp);
      case UnaryExpression.PLUS :
      verifyNumericType(tk, exp);
      return exp;
    }
    return exp;
  }

  /**
	 * Acción semántica que crea una expresión binaria en forma de suma o resta
	 */
  private Expression actionSumExpression(Token tk, int op, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tk, exp1, exp2);
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  /**
	 * Acción semántica que crea una expresión binaria en forma de suma o resta
	 */
  private Expression actionProdExpression(Token tk, int op, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    if (op == BinaryExpression.MOD) verifyIntegerTypes(tk, exp1, exp2);
    else verifyNumericTypes(tk, exp1, exp2);
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  /**
	 * Acción semántica que crea un literal de tipo entero
	 */
  private LiteralExpression actionIntegerLiteral(Token tk)
  {
    verifyIntegerValue(tk);
    return new IntegerLiteralExpression(tk.image);
  }

  /**
	 * Acción semántica que crea una expresión de referencia a una
	 * variable o a una función
	 */
  private Expression actionReferenceExpression(Token tid1, Token tid2, CallParameters param, SymbolTable symtab)
  {
    if (param == null) return actionVariableExpression(tid1, symtab);
    else if (tid2 == null) return actionCallExpression(tid1, param, symtab);
    else return actionCallExpression(tid1, tid2, param, symtab);
  }

  /**
	 * Acción semántica que crea una expresión de referencia a una variable
	 */
  private Expression actionVariableExpression(Token tid, SymbolTable symtab)
  {
    verifyUnknownVariable(tid, symtab);
    Variable var = symtab.getVariable(tid.image);
    return new VariableExpression(var);
  }

  /**
	 * Acción semántica que crea una expresión de llamada a una función de la
	 * misma biblioteca
	 */
  private Expression actionCallExpression(Token tk, CallParameters param, SymbolTable symtab)
  {
    verifyUnknownFunction(tk, param, symtab);
    Function called = symtab.getActiveLibrary().getAnyFunction(tk.image, param.getTypes());
    return new CallExpression(called, param, symtab.getActiveLibrary());
  }

  /**
	 * Acción semántica que crea una expresión de llamada a una función de una
	 * biblioteca importada
	 */
  private Expression actionCallExpression(Token tid1, Token tid2, CallParameters param, SymbolTable symtab)
  {
    verifyUnknownLibrary(tid1, symtab);
    LibraryDeclaration lib = symtab.getLibrary(tid1.image);
    verifyUnknownFunction(tid2, param, lib);
    Function called = lib.getPublicFunction(tid2.image, param.getTypes());
    return new CallExpression(called, param, lib);
  }

  private Expression actionBitOrExpression(Token tid1, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tid1, exp1, exp2);
    int op = BinaryExpression.BIT_OR;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  private Expression actionBitAndExpression(Token tid1, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tid1, exp1, exp2);
    int op = BinaryExpression.BIT_AND;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  private Expression actionXORExpression(Token tid1, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tid1, exp1, exp2);
    int op = BinaryExpression.XOR;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  private Expression actionCompExpression(Token tk, int op, Expression exp1)
  {
    switch (op)
    {
      case UnaryExpression.NONE :
      return exp1;
      case UnaryExpression.TILDE :
      verifyNumericType(tk, exp1);
      return new UnaryExpression(op, exp1);
    }
    return exp1;
  }

  private Expression actionShiftExpression(Token tid1, int op,Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tid1, exp1, exp2);
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

  private Expression actionBitORExpression(Token tk, Expression exp1, Expression exp2)
  {
    if (exp1 == null || exp2 == null) return null;
    verifyNumericTypes(tk, exp1, exp2);
    int op = BinaryExpression.BIT_OR;
    Expression exp = new BinaryExpression(op, exp1, exp2);
    return exp;
  }

/**************************************************************/
/*         EL ANÁLISIS DE LA CABECERA COMIENZA AQUÍ           */
/**************************************************************/

/**
 * Reconoce el contenido completo de un archivo ".tinto"
 *
 * CompilationUnit ::= (InportClause)* LibraryDecl
 */
  final public void CompilationUnit(SymbolTable symtab) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      ImportClause();
    }
    LibraryDecl(symtab);
  }

/**
 * Reconoce una clausula de importación
 *
 * ImportClause ::= <IMPORT> <IDENTIFIER> <SEMICOLON> 
 */
  final public void ImportClause() throws ParseException {
    jj_consume_token(IMPORT);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(SEMICOLON);
  }

/**
 * Reconoce la declaración de una biblioteca
 *
 * LibraryDecl ::=  <LIBRARY> <IDENTIFIER> <LBRACE> ( FunctionDecl )* <RBRACE> 
 */
  final public void LibraryDecl(SymbolTable symtab) throws ParseException {
    jj_consume_token(LIBRARY);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PRIVATE:
      case PUBLIC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      FunctionDecl(symtab);
    }
    jj_consume_token(RBRACE);
  }

/**
 * Reconoce la declaración de una función
 *
 * FunctionDecl ::= Access FunctionType <IDENTIFIER> ArgumentDecl FunctionBody
 */
  final public void FunctionDecl(SymbolTable symtab) throws ParseException {
  Token tid;
  int [ ] args;
    Access();
    FunctionType();
    tid = jj_consume_token(IDENTIFIER);
    args = ArgumentDecl();
    symtab.setActiveFunction(tid.image, args);
    FunctionBody(symtab);
  }

/**
 * Reconoce un modificador de acceso
 *
 * Access ::= <PUBLIC> | <PRIVATE>
 */
  final public void Access() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Reconoce el tipo de datos que devuelve una función
 *
 * FunctionType ::= Type | <VOID>
 */
  final public void FunctionType() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      tryType();
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/**
 * Reconoce un tipo de datos básico
 *
 * Type ::= <INT> | <CHAR> | <BOOLEAN>
 */
  final public int tryType() throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    IDENTIFIER
  }
  ;
  int type = Type.MISMATCH_TYPE;
    try {
      type = parseType();
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un tipo de datos básico
 *
 * Type ::= <INT> | <CHAR> | <BOOLEAN>
 */
  final public int parseType() throws ParseException {
  int type;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      type = Type.INT_TYPE;
      break;
    case CHAR:
      jj_consume_token(CHAR);
      type = Type.CHAR_TYPE;
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      type = Type.BOOLEAN_TYPE;
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return type;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de argumentos de una función
 *
 * ArgumentDecl ::= <LPAREN> ( Argument ( <COMMA> Argument )* )? <RPAREN>
 */
  final public int [ ] ArgumentDecl() throws ParseException {
  int [ ] args = new int [ 0 ];
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      args = Argument(args);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        jj_consume_token(COMMA);
        args = Argument(args);
      }
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return args;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de un argumento
 *
 * Argument ::= Type <IDENTIFIER>
 */
  final public int [ ] Argument(int [ ] args) throws ParseException {
  int type;
    type = tryType();
    jj_consume_token(IDENTIFIER);
    {if (true) return actionAddArgumentType(type, args);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce el cuerpo de una función
 *
 * FunctionBody ::= <LBRACE> ( Statement )* <RBRACE>
 */
  final public void FunctionBody(SymbolTable symtab) throws ParseException {
  BlockStatement block = new BlockStatement();
  Statement stm;
  Token tk;
    jj_consume_token(LBRACE);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case IF:
      case INT:
      case RETURN:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_4;
      }
      stm = tryStatement(symtab);
      actionAddStatement(block, stm);
    }
    tk = jj_consume_token(RBRACE);
    actionSetFunctionBody(tk, block, symtab);
  }

/**************************************************************/
/*       EL ANÁLISIS DE LAS INSTRUCCIONES COMIENZA AQUÍ       */
/**************************************************************/

/**
 * Reconoce una sentencia del lenguaje
 *
 * Statement ::= Decl | IdStm | IfStm | WhileStm | ReturnStm | NoStm | BlockStm
 */
  final public Statement tryStatement(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseStatement(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una sentencia del lenguaje
 *
 * Statement ::= Decl | IdStm | IfStm | WhileStm | ReturnStm | NoStm | BlockStm
 */
  final public Statement parseStatement(SymbolTable symtab) throws ParseException {
  Statement stm;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOLEAN:
    case CHAR:
    case INT:
      stm = tryDecl(symtab);
      break;
    case IDENTIFIER:
      stm = tryIdStm(symtab);
      break;
    case IF:
      stm = tryIfStm(symtab);
      break;
    case WHILE:
      stm = tryWhileStm(symtab);
      break;
    case RETURN:
      stm = tryReturnStm(symtab);
      break;
    case SEMICOLON:
      stm = tryNoStm(symtab);
      break;
    case LBRACE:
      stm = tryBlockStm(symtab);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de una variable (o una lista de variables)
 *
 * Decl ::= Type <IDENTIFIER> Assignement ( <COMMA> <IDENTIFIER> Assignement )* <SEMICOLON>
 */
  final public Statement tryDecl(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseDecl(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la declaración de una variable (o una lista de variables)
 *
 * Decl ::= Type <IDENTIFIER> Assignement ( <COMMA> <IDENTIFIER> Assignement )* <SEMICOLON>
 */
  final public Statement parseDecl(SymbolTable symtab) throws ParseException {
  int type;
  Token tid;
  Expression exp;
  BlockStatement block = new BlockStatement();
  Variable var;
    type = tryType();
    tid = jj_consume_token(IDENTIFIER);
    exp = tryAssignement(symtab);
    var = actionAddDeclaration(symtab, type, tid);
    actionAddAssignement(block, var, exp);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      tid = jj_consume_token(IDENTIFIER);
      exp = tryAssignement(symtab);
      var = actionAddDeclaration(symtab, type, tid);
      actionAddAssignement(block, var, exp);
    }
    jj_consume_token(SEMICOLON);
    {if (true) return actionGetStatementFromBlock(block);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la asignación inicial de una variable
 *
 * Assignement ::= ( <ASSIGN>  Expr )? 
 */
  final public Expression tryAssignement(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    COMMA, SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseAssignement(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce la asignación inicial de una variable
 *
 * Assignement ::= ( <ASSIGN>  Expr )? 
 */
  final public Expression parseAssignement(SymbolTable symtab) throws ParseException {
  Expression exp = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = tryExpr(symtab);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "if".
 *
 * IfStm ::= <IF> <LPAREN> Expr <RPAREN> Stm  ( <ELSE> Stm )?
 */
  final public Statement tryIfStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseIfStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "if".
 *
 * IfStm ::= <IF> <LPAREN> Expr <RPAREN> Stm  ( <ELSE> Stm )?
 */
  final public Statement parseIfStm(SymbolTable symtab) throws ParseException {
  Token tk;
  Expression cond;
  Statement thenStm;
  Statement elseStm = null;
    jj_consume_token(IF);
    tk = jj_consume_token(LPAREN);
    cond = tryExpr(symtab);
    jj_consume_token(RPAREN);
    thenStm = tryStatement(symtab);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      elseStm = tryStatement(symtab);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    {if (true) return actionIfStatement(tk, cond, thenStm, elseStm);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "while".
 *
 * WhileStm ::= <WHILE> <LPAREN> Expr <RPAREN> Stm
 */
  final public Statement tryWhileStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseWhileStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "while".
 *
 * WhileStm ::= <WHILE> <LPAREN> Expr <RPAREN> Stm
 */
  final public Statement parseWhileStm(SymbolTable symtab) throws ParseException {
  Token tk;
  Expression cond;
  Statement body;
    jj_consume_token(WHILE);
    tk = jj_consume_token(LPAREN);
    cond = tryExpr(symtab);
    jj_consume_token(RPAREN);
    body = tryStatement(symtab);
    {if (true) return actionWhileStatement(tk, cond, body);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "return".
 *
 * ReturnStm ::= <RETURN> ( Expr )? <SEMICOLON>
 */
  final public Statement tryReturnStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseReturnStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción "return".
 *
 * ReturnStm ::= <RETURN> ( Expr )? <SEMICOLON>
 */
  final public Statement parseReturnStm(SymbolTable symtab) throws ParseException {
  Token tk;
  Expression exp = null;
    tk = jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case PLUS:
    case MINUS:
    case TILDE:
      exp = tryExpr(symtab);
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    {if (true) return actionReturnStatement(tk, exp, symtab);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción vacía.
 *
 * NoStm ::= <SEMICOLON>
 */
  final public Statement tryNoStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseNoStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción vacía.
 *
 * NoStm ::= <SEMICOLON>
 */
  final public Statement parseNoStm(SymbolTable symtab) throws ParseException {
    jj_consume_token(SEMICOLON);
    {if (true) return null;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción que comienza por "id"
 *
 * IdStm ::= <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall )  <SEMICOLON>
 */
  final public Statement tryIdStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseIdStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una instrucción que comienza por "id"
 *
 * IdStm ::= <ID> ( Assignement | MethodCall | <DOT>  <ID>  MethodCall )  <SEMICOLON>
 */
  final public Statement parseIdStm(SymbolTable symtab) throws ParseException {
  Token tid1, tid2;
  Expression exp;
  CallParameters param;
  Statement stm;
    tid1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      exp = tryExpr(symtab);
      stm = actionAssignStatement(tid1, exp, symtab);
      break;
    case LPAREN:
      param = FunctionCall(symtab);
      stm = actionCallStatement(tid1, param, symtab);
      break;
    case DOT:
      jj_consume_token(DOT);
      tid2 = jj_consume_token(IDENTIFIER);
      param = FunctionCall(symtab);
      stm = actionCallStatement(tid1, tid2, param, symtab);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un bloque de instrucciones entre llaves.
 *
 * BlockStm ::= <LBRACE> ( Stm )* <RBRACE>
 */
  final public Statement tryBlockStm(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {
    SEMICOLON
  }
  ;
  int [ ] rsync =
  {
    INT, CHAR, BOOLEAN, IF, WHILE, RETURN, RBRACE
  }
  ;
  Statement stm = null;
    try {
      stm = parseBlockStm(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return stm;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un bloque de instrucciones entre llaves.
 *
 * BlockStm ::= <LBRACE> ( Stm )* <RBRACE>
 */
  final public Statement parseBlockStm(SymbolTable symtab) throws ParseException {
  BlockStatement block = new BlockStatement();
  Statement stm;
    jj_consume_token(LBRACE);
    symtab.createScope();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BOOLEAN:
      case CHAR:
      case IF:
      case INT:
      case RETURN:
      case WHILE:
      case IDENTIFIER:
      case LBRACE:
      case SEMICOLON:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_6;
      }
      stm = tryStatement(symtab);
      actionAddStatement(block, stm);
    }
    jj_consume_token(RBRACE);
    symtab.deleteScope();
    {if (true) return block;}
    throw new Error("Missing return statement in function");
  }

/**************************************************************/
/*       EL ANÁLISIS DE LAS EXPRESIONES COMIENZA AQUÍ         */
/**************************************************************/

/**
 * Reconoce una expresión (considerando el operador OR como el de menor prioridad)
 *
 * Expr ::= AndExpr ( <OR> AndExpr )*
 */
  final public Expression tryExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN
  }
  ;
  Expression exp = null;
    try {
      exp = parseExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión (considerando el operador OR como el de menor prioridad)
 *
 * Expr ::= AndExpr ( <OR> AndExpr )*
 */
  final public Expression parseExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  Token tk;
    exp1 = tryAndExpr(symtab);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[15] = jj_gen;
        break label_7;
      }
      tk = jj_consume_token(OR);
      exp2 = tryAndExpr(symtab);
      exp1 = actionOrExpression(tk, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad del operador AND
 *
 * AndExpr ::= BitOrExpr ( <AND> BitOrExpr )*
 */
  final public Expression tryAndExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN, OR
  }
  ;
  Expression exp = null;
    try {
      exp = parseAndExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad del operador AND
 *
 * AndExpr ::= BitOrExpr ( <AND> BitOrExpr )*
 */
  final public Expression parseAndExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  Token tk;
    exp1 = tryBitOrExpr(symtab);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_8;
      }
      tk = jj_consume_token(AND);
      exp2 = tryBitOrExpr(symtab);
      exp1 = actionAndExpression(tk, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression tryBitOrExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseBitOrExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression parseBitOrExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  Token tk;
  int op = BinaryExpression.BIT_OR;
    exp1 = tryXORExpr(symtab);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_OR:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_9;
      }
      tk = jj_consume_token(BIT_OR);
      exp2 = tryXORExpr(symtab);
      exp1 = actionBitORExpression(tk, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression tryXORExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseXORExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// BitXOrExpr ::= BitAndExpr ( bit-xor BitAndExpr )*
  final public Expression parseXORExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  Token tk;
  int op = BinaryExpression.XOR;
    exp1 = tryBitAndExpr(symtab);
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case XOR:
        ;
        break;
      default:
        jj_la1[18] = jj_gen;
        break label_10;
      }
      tk = jj_consume_token(XOR);
      exp2 = tryBitAndExpr(symtab);
      exp1 = actionXORExpression(tk, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public Expression tryBitAndExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseBitAndExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// BitAndExpr ::= RelExpr ( bit-and RelExpr )*
  final public Expression parseBitAndExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  Token tk;
    exp1 = tryRelExpr(symtab);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case BIT_AND:
        ;
        break;
      default:
        jj_la1[19] = jj_gen;
        break label_11;
      }
      tk = jj_consume_token(BIT_AND);
      exp2 = tryRelExpr(symtab);
      exp1 = actionBitAndExpression(tk, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad de los comparadores
 *
 * RelExpr ::= ShiftExpr (  RelOp  ShiftExpr )?
 */
  final public Expression tryRelExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN, OR, AND
  }
  ;
  Expression exp = null;
    try {
      exp = parseRelExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad de los comparadores
 *
 * RelExpr ::= ShiftExpr (  RelOp  ShiftExpr )?
 */
  final public Expression parseRelExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  int op;
  Token tk;
    exp1 = tryShiftExpr(symtab);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
    case LE:
    case GT:
    case LT:
    case GE:
    case NE:
      tk = getToken(1);
      op = RelOp();
      exp2 = tryShiftExpr(symtab);
      exp1 = actionRelExpression(tk, op, exp1, exp2);
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador de relación
 *
 * RelOp ::= <EQ> | <NE> | <GT> | <GE> | <LT> | <LE>
 */
  final public int RelOp() throws ParseException {
  int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQ:
      jj_consume_token(EQ);
      op = BinaryExpression.EQ;
      break;
    case NE:
      jj_consume_token(NE);
      op = BinaryExpression.NEQ;
      break;
    case GT:
      jj_consume_token(GT);
      op = BinaryExpression.GT;
      break;
    case GE:
      jj_consume_token(GE);
      op = BinaryExpression.GE;
      break;
    case LT:
      jj_consume_token(LT);
      op = BinaryExpression.LT;
      break;
    case LE:
      jj_consume_token(LE);
      op = BinaryExpression.LE;
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

// ShiftExpr ::= SumExpr (  ShiftOp  SumExpr )*
  final public Expression tryShiftExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseShiftExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

// ShiftExpr ::= SumExpr (  ShiftOp  SumExpr )*
  final public Expression parseShiftExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  int op;
  Token tk;
    exp1 = trySumExpr(symtab);
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RS_SHIFT:
      case RU_SHIFT:
      case L_SHIFT:
        ;
        break;
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      tk = getToken(1);
      op = ShiftOp();
      exp2 = trySumExpr(symtab);
      exp1 = actionShiftExpression(tk,op,exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

  final public int ShiftOp() throws ParseException {
  int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case L_SHIFT:
      jj_consume_token(L_SHIFT);
      op = BinaryExpression.L_SHIFT;
      break;
    case RS_SHIFT:
      jj_consume_token(RS_SHIFT);
      op = BinaryExpression.RS_SHIFT;
      break;
    case RU_SHIFT:
      jj_consume_token(RU_SHIFT);
      op = BinaryExpression.RU_SHIFT;
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad de la suma
 * (una expresión aritmética)
 *
 * SumExpr ::= UnOp ProdExpr ( SumOp ProdExpr )*
 */
  final public Expression trySumExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN, OR, AND, EQ, NE, GT, GE, LT, LE
  }
  ;
  Expression exp = null;
    try {
      exp = parseSumExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad de la suma
 * (una expresión aritmética)
 *
 * SumExpr ::= UnOp ProdExpr ( SumOp ProdExpr )*
 */
  final public Expression parseSumExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  int unop, op;
  Token tk;
    tk = getToken(1);
    unop = UnOp();
    exp1 = tryProdExpr(symtab);
    exp1 = actionUnaryExpression(tk, unop, exp1);
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[24] = jj_gen;
        break label_13;
      }
      tk = getToken(1);
      op = SumOp();
      exp2 = tryProdExpr(symtab);
      exp1 = actionSumExpression(tk, op, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador unario
 *
 * UnOp ::= ( <NOT> | <MINUS>  | <PLUS>  )?
 */
  final public int UnOp() throws ParseException {
  int op = UnaryExpression.NONE;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
    case PLUS:
    case MINUS:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOT:
        jj_consume_token(NOT);
      op = UnaryExpression.NOT;
        break;
      case MINUS:
        jj_consume_token(MINUS);
      op = UnaryExpression.MINUS;
        break;
      case PLUS:
        jj_consume_token(PLUS);
      op = UnaryExpression.PLUS;
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador del nivel de prioridad de la suma
 *
 * SumOp ::= <MINUS> | <PLUS>
 */
  final public int SumOp() throws ParseException {
  int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      op = BinaryExpression.MINUS;
      break;
    case PLUS:
      jj_consume_token(PLUS);
      op = BinaryExpression.PLUS;
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad del producto
 * (un término aritmético)
 *
 * ProdExpr ::= CompExpr ( MultOp CompExpr )*
 */
  final public Expression tryProdExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN, OR, AND, EQ, NE, GT, GE, LT, LE, PLUS, MINUS
  }
  ;
  Expression exp = null;
    try {
      exp = parseProdExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad del producto
 * (un término aritmético)
 *
 * ProdExpr ::= CompExpr ( MultOp CompExpr )*
 */
  final public Expression parseProdExpr(SymbolTable symtab) throws ParseException {
  Expression exp1, exp2;
  int op;
  Token tk;
    exp1 = tryCompExpr(symtab);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PROD:
      case DIV:
      case MOD:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_14;
      }
      tk = getToken(1);
      op = MultOp();
      exp2 = tryCompExpr(symtab);
      exp1 = actionProdExpression(tk, op, exp1, exp2);
    }
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un operador del nivel de prioridad del producto
 *
 * MultOp ::= <PROD> | <DIV> | <MOD>
 */
  final public int MultOp() throws ParseException {
  int op;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PROD:
      jj_consume_token(PROD);
      op = BinaryExpression.PROD;
      break;
    case DIV:
      jj_consume_token(DIV);
      op = BinaryExpression.DIV;
      break;
    case MOD:
      jj_consume_token(MOD);
      op = BinaryExpression.MOD;
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return op;}
    throw new Error("Missing return statement in function");
  }

// * CompExpr ::= (<TILDE>)? Factor
  final public Expression tryCompExpr(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON
  }
  ;
  Expression exp = null;
    try {
      exp = parseCompExpr(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una expresión en el nivel de prioridad de los comparadores
 *
 * CompExpr ::= (<TILDE>)? Factor
 */
  final public Expression parseCompExpr(SymbolTable symtab) throws ParseException {
  Expression exp1;
  int op = UnaryExpression.NONE;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
    op = UnaryExpression.TILDE;
      break;
    default:
      jj_la1[30] = jj_gen;
      ;
    }
    tk = getToken(1);
    exp1 = tryFactor(symtab);
    exp1 = actionCompExpression(tk, op, exp1);
    {if (true) return exp1;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un factor
 *
 * Factor ::= Literal | Reference | <LPAREN> Expr <RPAREN>
 */
  final public Expression tryFactor(SymbolTable symtab) throws ParseException {
  int [ ] lsync =
  {}
  ;
  int [ ] rsync =
  {
    SEMICOLON, COMMA, RPAREN, OR, AND, EQ, NE, GT, GE, LT, LE, PLUS, MINUS, PROD, DIV, MOD
  }
  ;
  Expression exp = null;
    try {
      exp = parseFactor(symtab);
    } catch (Exception ex) {
    catchError(ex);
    skipTo(lsync, rsync);
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un factor
 *
 * Factor ::= Literal | Reference | <LPAREN> Expr <RPAREN>
 */
  final public Expression parseFactor(SymbolTable symtab) throws ParseException {
  Expression exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
      exp = Literal();
      break;
    case IDENTIFIER:
      exp = Reference(symtab);
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      exp = tryExpr(symtab);
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce un literal
 *
 * Literal ::= <INTEGER_LITERAL> | <CHAR_LITERAL>  | <TRUE>  | <FALSE>
 */
  final public Expression Literal() throws ParseException {
  Expression exp;
  Token tk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      tk = jj_consume_token(INTEGER_LITERAL);
      exp = actionIntegerLiteral(tk);
      break;
    case CHAR_LITERAL:
      tk = jj_consume_token(CHAR_LITERAL);
      exp = new CharLiteralExpression(tk.image);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      exp = new BooleanLiteralExpression(true);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      exp = new BooleanLiteralExpression(false);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce una referencia a una variable o a una función
 *
 * Reference ::= <IDENTIFIER> ( FunctionCall | <DOT> <IDENTIFIER> FunctionCall )?
 */
  final public Expression Reference(SymbolTable symtab) throws ParseException {
  Token tid1, tid2 = null;
  CallParameters params = null;
    tid1 = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
    case DOT:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LPAREN:
        params = FunctionCall(symtab);
        break;
      case DOT:
        jj_consume_token(DOT);
        tid2 = jj_consume_token(IDENTIFIER);
        params = FunctionCall(symtab);
        break;
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[34] = jj_gen;
      ;
    }
    {if (true) return actionReferenceExpression(tid1, tid2, params, symtab);}
    throw new Error("Missing return statement in function");
  }

/**
 * Reconoce los parámetros de llamada a una función
 *
 * FunctionCall ::= <LPAREN> ( Expr ( <COMMA> Expr )* )? <RPAREN>
 */
  final public CallParameters FunctionCall(SymbolTable symtab) throws ParseException {
  CallParameters param = new CallParameters();
  Expression exp;
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
    case TRUE:
    case INTEGER_LITERAL:
    case CHAR_LITERAL:
    case IDENTIFIER:
    case LPAREN:
    case NOT:
    case PLUS:
    case MINUS:
    case TILDE:
      exp = tryExpr(symtab);
      param.addParameter(exp);
      label_15:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[35] = jj_gen;
          break label_15;
        }
        jj_consume_token(COMMA);
        exp = tryExpr(symtab);
        param.addParameter(exp);
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

  void skipTo(int [ ] left, int [ ] right) throws ParseException {
  Token prev = getToken(0);
  Token next = getToken(1);
  boolean flag = false;
  if (prev.kind == EOF || next.kind == EOF) flag = true;
  for (int i = 0; i < left.length; i++) if (prev.kind == left [ i ]) flag = true;
    for (int i = 0; i < right.length; i++) if (next.kind == right [ i ]) flag = true;
      while (!flag)
      {
        getNextToken();
        prev = getToken(0);
        next = getToken(1);
        if (prev.kind == EOF || next.kind == EOF) flag = true;
        for (int i = 0; i < left.length; i++) if (prev.kind == left [ i ]) flag = true;
        for (int i = 0; i < right.length; i++) if (next.kind == right [ i ]) flag = true;
      }
  }

  /** Generated Token Manager. */
  public TintoParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[37];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x30000,0x30000,0x104300,0x4300,0x0,0x4300,0x90245300,0x90245300,0x0,0x0,0x400,0x38480800,0x20000000,0x90245300,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38480800,0x8480800,0x20000000,0x20000000,0x0,0x38480800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x4,0x0,0x2,0x2,0x4,0x10,0x0,0x8e000,0x18,0x2,0x800,0x1000,0x200000,0x400000,0x100000,0x7e0,0x7e0,0x3800000,0x3800000,0xc000,0xe000,0xe000,0xc000,0x70000,0x70000,0x80000,0x0,0x0,0x8,0x8,0x4,0x8e000,};
   }

  /** Constructor with InputStream. */
  public TintoParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public TintoParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TintoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public TintoParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TintoParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public TintoParser(TintoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(TintoParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 37; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 37; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
